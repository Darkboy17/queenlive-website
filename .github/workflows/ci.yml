name: Build, Push & Deploy Docker Image

on:
  push:
    branches:
      - main
    paths:
      - 'public/**'
      - 'js/**'
      - 'css/**'
      - 'components/**'
      - 'index.html'
      - 'build.js'
      - 'package.json'
      - 'Dockerfile'
      - '.github/workflows/ci.yml'
  pull_request:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # -----------------------------------------------------------
      # STEP 1Ô∏è‚É£: Detect if public/ changed (controls npm run build)
      # -----------------------------------------------------------
      - name: Detect changes in public folder
        id: detect_public
        run: |
          echo "üîç Checking if 'public/' changed..."
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            if git diff --quiet HEAD^ HEAD -- public/; then
              echo "üü¢ No changes in public/"
              echo "PUBLIC_CHANGED=false" >> $GITHUB_ENV
            else
              echo "üü° Changes detected in public/"
              echo "PUBLIC_CHANGED=true" >> $GITHUB_ENV
            fi
          else
            echo "First commit ‚Äî forcing build"
            echo "PUBLIC_CHANGED=true" >> $GITHUB_ENV
          fi

      # -----------------------------------------------------------
      # STEP 2Ô∏è‚É£: Detect if any relevant project files changed
      # -----------------------------------------------------------
      - name: Detect relevant project changes
        id: detect_relevant
        run: |
          echo "üîç Checking if relevant code/config files changed..."
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            PATHS="js/ css/ components/ index.html build.js package.json Dockerfile .github/workflows/ci.yml"
            if git diff --quiet HEAD^ HEAD -- $PATHS; then
              echo "üü¢ No relevant changes in app code/config"
              echo "RELEVANT_CHANGED=false" >> $GITHUB_ENV
            else
              echo "üü° Relevant changes detected"
              echo "RELEVANT_CHANGED=true" >> $GITHUB_ENV
            fi
          else
            echo "First commit ‚Äî forcing deploy"
            echo "RELEVANT_CHANGED=true" >> $GITHUB_ENV
          fi

      # -----------------------------------------------------------
      # STEP 3Ô∏è‚É£: Install dependencies
      # -----------------------------------------------------------
      - name: Install dependencies
        run: npm ci

      # -----------------------------------------------------------
      # STEP 4Ô∏è‚É£: Conditional build
      # -----------------------------------------------------------
      # Full build when public/ assets changed
      - name: Run build.js (with conversion)
        if: env.PUBLIC_CHANGED == 'true'
        run: |
          echo "üõ†Ô∏è Running npm run build because public folder changed"
          npm run build

      # Fast build (skip media conversion) when only code/config changed
      - name: Run build.js (skip conversion)
        if: env.PUBLIC_CHANGED != 'true' && env.RELEVANT_CHANGED == 'true'
        run: |
          echo "‚ö° Running npm run build:fast because only code/config changed"
          npm run build:fast

      # -----------------------------------------------------------
      # STEP 5Ô∏è‚É£: Build and push Docker image if app changed
      # -----------------------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        if: env.RELEVANT_CHANGED == 'true' || env.PUBLIC_CHANGED == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          no-cache: true        # üëà add this to force full rebuild
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/queenlive:latest
          build-args: |
            PUBLIC_CHANGED=${{ env.PUBLIC_CHANGED }}

      - name: Skip Docker build
        if: env.RELEVANT_CHANGED != 'true' && env.PUBLIC_CHANGED != 'true'
        run: echo "‚è≠Ô∏è Skipping Docker build (no relevant changes)"

      - name: Logout from Docker Hub
        run: docker logout

      # -----------------------------------------------------------
      # STEP 6Ô∏è‚É£: Deploy only if relevant or public changed
      # -----------------------------------------------------------
      - name: Deploy to GCP VM via SSH
        if: env.RELEVANT_CHANGED == 'true' || env.PUBLIC_CHANGED == 'true'
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USER }}
          key: ${{ secrets.GCP_VM_SSH_KEY }}
          script: |
            echo "üßπ Cleaning up old Docker data..."
            docker container prune -f
            docker image prune -af
            docker volume prune -f
            docker system df

            echo "üöÄ Pulling latest Docker image and redeploying..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/queenlive:latest
            docker stop queenlive || true
            docker rm queenlive || true
            docker run -d --name queenlive -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/queenlive:latest

      - name: Skip deploy
        if: env.RELEVANT_CHANGED != 'true' && env.PUBLIC_CHANGED != 'true'
        run: echo "‚è≠Ô∏è Skipping deploy ‚Äî nothing new to release"