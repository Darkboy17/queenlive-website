name: Build, Push & Deploy Docker Image

on:
  push:
    branches: [ main ]
    paths:
      - 'public/**'
      - 'js/**'
      - 'css/**'
      - 'components/**'
      - 'index.html'
      - 'build.js'
      - 'package.json'
      - 'Dockerfile'
      - '.github/workflows/ci.yml'
  pull_request:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # -----------------------------------------------------------
      # STEP 1Ô∏è‚É£: Checkout repo
      # -----------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # -----------------------------------------------------------
      # STEP 2Ô∏è‚É£: Restore dist cache
      # -----------------------------------------------------------
      - name: Restore dist cache
        uses: actions/cache@v4
        with:
          path: dist
          key: dist-${{ hashFiles('public/**', 'js/**', 'css/**', 'components/**', 'index.html', 'build.js') }}
          restore-keys: |
            dist-

      # -----------------------------------------------------------
      # STEP 3Ô∏è‚É£: Setup Node.js
      # -----------------------------------------------------------
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # -----------------------------------------------------------
      # STEP 4Ô∏è‚É£: Smart build logic
      # -----------------------------------------------------------
      - name: Smart build logic
        id: smart_build
        run: |
          echo "üß† Checking build conditions..."

          # Check if dist exists (from cache)
          if [ -d "dist" ]; then
            echo "‚úÖ Found dist/ folder (cached)"
            DIST_EXISTS=true
          else
            echo "‚ùå No dist/ folder found ‚Äî forcing full build"
            DIST_EXISTS=false
          fi

          # Check if public/ folder exists
          if [ -d "public" ]; then
            echo "‚úÖ public/ folder exists"
            PUBLIC_EXISTS=true
          else
            echo "‚ùå public/ folder missing ‚Äî forcing full build"
            PUBLIC_EXISTS=false
          fi

          # Detect if public/ changed
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            if git diff --quiet HEAD^ HEAD -- public/; then
              PUBLIC_CHANGED=false
            else
              PUBLIC_CHANGED=true
            fi
          else
            PUBLIC_CHANGED=true
          fi

          # Detect if other app files changed
          PATHS="js/ css/ components/ index.html build.js package.json Dockerfile .github/workflows/ci.yml"
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            if git diff --quiet HEAD^ HEAD -- $PATHS; then
              RELEVANT_CHANGED=false
            else
              RELEVANT_CHANGED=true
            fi
          else
            RELEVANT_CHANGED=true
          fi
          echo "RELEVANT_CHANGED=$RELEVANT_CHANGED" >> $GITHUB_ENV

          # Decide build type
          if [ "$PUBLIC_EXISTS" = "false" ] || [ "$PUBLIC_CHANGED" = "true" ] || [ "$DIST_EXISTS" = "false" ]; then
            echo "üß© Full build required"
            echo "FULL_BUILD=true" >> $GITHUB_ENV
            echo "FAST_BUILD=false" >> $GITHUB_ENV
            echo "SHOULD_DEPLOY=true" >> $GITHUB_ENV
          elif [ "$RELEVANT_CHANGED" = "true" ]; then
            echo "‚ö° Fast build triggered"
            echo "FULL_BUILD=false" >> $GITHUB_ENV
            echo "FAST_BUILD=true" >> $GITHUB_ENV
            echo "SHOULD_DEPLOY=true" >> $GITHUB_ENV
          else
            echo "üü° No relevant changes ‚Äî skipping build"
            echo "FULL_BUILD=false" >> $GITHUB_ENV
            echo "FAST_BUILD=false" >> $GITHUB_ENV
            echo "SHOULD_DEPLOY=false" >> $GITHUB_ENV
          fi

      # -----------------------------------------------------------
      # STEP 5Ô∏è‚É£: Install dependencies
      # -----------------------------------------------------------
      - name: Install dependencies
        run: npm ci

      # -----------------------------------------------------------
      # STEP 6Ô∏è‚É£: Conditional build logic (full vs fast)
      # -----------------------------------------------------------
      - name: Full build
        if: env.FULL_BUILD == 'true'
        run: npm run build

      - name: Fast build
        if: env.FAST_BUILD == 'true'
        run: npm run build:fast

      # -----------------------------------------------------------
      # STEP 7Ô∏è‚É£: Save dist cache
      # -----------------------------------------------------------
      - name: Save dist cache
        uses: actions/cache@v4
        with:
          path: dist
          key: dist-${{ hashFiles('public/**', 'js/**', 'css/**', 'components/**', 'index.html', 'build.js') }}

      # -----------------------------------------------------------
      # STEP 8Ô∏è‚É£: Docker build & push
      # -----------------------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        if: env.RELEVANT_CHANGED == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/queenlive:latest

      - name: Skip Docker build
        if: env.RELEVANT_CHANGED != 'true'
        run: echo "‚è≠Ô∏è Skipping Docker build ‚Äî nothing new to deploy"

      - name: Logout from Docker Hub
        run: docker logout

      # -----------------------------------------------------------
      # STEP 9Ô∏è‚É£: Auto-deploy to GCP VM via SSH
      # -----------------------------------------------------------
      - name: Deploy to GCP VM via SSH
        if: env.SHOULD_DEPLOY == 'true' && env.RELEVANT_CHANGED == 'true'
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USER }}
          key: ${{ secrets.GCP_VM_SSH_KEY }}
          script: |
            echo "üßπ Cleaning up old Docker data..."
            docker container prune -f
            docker image prune -af
            docker volume prune -f
            docker system df

            echo "üöÄ Pulling latest Docker image and redeploying..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/queenlive:latest
            docker stop queenlive || true
            docker rm queenlive || true
            docker run -d --name queenlive -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/queenlive:latest

      - name: Skip deploy
        if: env.SHOULD_DEPLOY != 'true'
        run: echo "‚è≠Ô∏è Skipping deploy ‚Äî nothing new to release"
